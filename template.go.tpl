// Code generated by paramify {{.Command}}; DO NOT EDIT.
package {{.PackageName}}

{{range $typename, $values := .TypesAndValues}}
func New{{$typename}}(
	{{range $values.Required}}{{ToLower .Name}} {{.Type}},
	{{end}}opts ...{{$typename}}Option,
) {{$typename}} {
	{{ToLower $typename}} := {{$typename}}{
		{{range $values.Required}}{{.Name}}: {{ToLower .Name}},
	{{end}}}
	for _, opt := range opts {
		opt.apply(&{{ToLower $typename}})
	}
	return {{ToLower $typename}}
}

type {{$typename}}Option interface {
	apply(*{{$typename}})
}

var (
	{{range $values.Optional}}
	_ {{$typename}}Option = (*{{ToLower $typename}}{{.Name}}Option)(nil)
	{{- end}}
)

type (
	{{range $values.Optional}}
	{{if .IsPointer}}{{ToLower $typename}}{{.Name}}Option {{TrimPrefix .Type "*"}}
	{{- else if or .IsInterface .IsAny}}{{ToLower $typename}}{{.Name}}Option struct{ {{.Type}} }
	{{- else}}{{ToLower $typename}}{{.Name}}Option {{.Type}}
	{{- end}}
	{{- end}}
)

{{range $values.Optional}}
{{if .IsPointer}}
func With{{$typename}}{{.Name}}({{ToLower .Name}} {{TrimPrefix .Type "*"}}) {{$typename}}Option {
	return {{ToLower $typename}}{{.Name}}Option({{ToLower .Name}})
}
{{else if or .IsInterface .IsAny}}
func With{{$typename}}{{.Name}}({{ToLower .Name}} {{.Type}}) {{$typename}}Option {
	return {{ToLower $typename}}{{.Name}}Option{ {{ToLower .Name}} }
}
{{else}}
func With{{$typename}}{{.Name}}({{ToLower .Name}} {{.Type}}) {{$typename}}Option {
	return {{ToLower $typename}}{{.Name}}Option({{ToLower .Name}})
}
{{end}}
{{end}}

{{range $values.Optional}}
{{if .IsPointer}}
func (o {{ToLower $typename}}{{.Name}}Option) apply(p *{{$typename}}) {
	{{ToLower .Name}} := {{TrimPrefix .Type "*"}}(o)
	p.{{.Name}} = &{{ToLower .Name}}
}
{{else if or .IsInterface .IsAny}}
func (o {{ToLower $typename}}{{.Name}}Option) apply(p *{{$typename}}) {
	p.{{.Name}} = {{.Type}}(o.{{.Type}})
}
{{else}}
func (o {{ToLower $typename}}{{.Name}}Option) apply(p *{{$typename}}) {
	p.{{.Name}} = {{.Type}}(o)
}
{{end}}
{{end}}

{{end}}
